---
spec:
  destination:
    server: https://kubernetes.default.svc
  source:
    repoURL: ${repo_url}
    targetRevision: ${target_revision}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - "CreateNamespace=true"

apps:
  aad-pod-identity:
    enabled: false
  apps:
    enabled: true
  argocd:
    enabled: true
  cert-manager:
    enabled: ${cert_manager.enable}
  csi-secrets-store-provider-azure:
    enabled: false
  efs-provisioner:
    enabled: false
  keycloak:
    enabled: ${keycloak.enable}
  kube-prometheus-stack:
    enabled: ${kube_prometheus_stack.enable}
  local-path-provisioner:
    enabled: false
  loki-stack:
    enabled: ${loki.enable}
  metrics-server:
    enabled: ${metrics_server.enable}
  minio:
    enabled: ${minio.enable}
  namespaces:
    enabled: true
  secrets-store-csi-driver:
    enabled: false
  traefik:
    enabled: ${traefik.enable}
  vault:
    enabled: false
  thanos:
    enabled: ${ can(metrics_archives.bucket_config) ? true : false }
  cluster-autoscaler:
    enabled: ${cluster_autoscaler.enable}

${yamlencode({"extraApps": extra_apps})}
${yamlencode({"extraAppProjects": extra_app_projects})}
${yamlencode({"extraApplicationSets": extra_application_sets})}

argo-cd:
  installCRDs: false
  configs:
    %{ if length(repositories) > 0 }
    repositories:
      ${indent(6, yamlencode(repositories))}
    %{ endif }
    secret:
      argocdServerAdminPassword: "${argocd_server_admin_password}"
      argocdServerAdminPasswordMtime: '2020-07-23T11:31:23Z'
      extra:
        oidc.default.clientSecret: "${replace(oidc.client_secret, "\"", "\\\"")}"
        accounts.pipeline.tokens: "${replace(argocd_accounts_pipeline_tokens, "\"", "\\\"")}"
        server.secretkey: "${replace(argocd_server_secretkey, "\"", "\\\"")}"
  controller:
    metrics:
      enabled: true
  dex:
    metrics:
      enabled: true
  repoServer:
    metrics:
      enabled: true
  server:
    config:
      accounts.pipeline: apiKey
      resource.customizations: |
        argoproj.io/Application:
          health.lua: |
            hs = {}
            hs.status = "Progressing"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                hs.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  hs.message = obj.status.health.message
                end
              end
            end
            return hs
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
      configManagementPlugins: |
        - name: kustomized-helm
          init:
            command: ["/bin/sh", "-c"]
            args: ["helm dependency build || true"]
          generate:
            command: ["/bin/sh", "-c"]
            args: ["echo \"$HELM_VALUES\" | helm template . --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $HELM_ARGS -f - --include-crds > all.yaml && kustomize build"]
      url: "https://${argocd.domain}"
      oidc.config: |
        name: OIDC
        issuer: "${replace(oidc.issuer_url, "\"", "\\\"")}"
        clientID: "${replace(oidc.client_id, "\"", "\\\"")}"
        clientSecret: $oidc.default.clientSecret
        requestedIDTokenClaims:
          groups:
            essential: true
        requestedScopes:
          - openid
          - profile
          - email
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
%{ if !bootstrap }
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
%{ endif }
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${argocd.domain}"
        - "argocd.apps.${base_domain}"
      tls:
        - secretName: argocd-tls
          hosts:
            - "${argocd.domain}"
            - "argocd.apps.${base_domain}"
    metrics:
      enabled: true
    rbacConfig:
      policy.default: ''
      policy.csv: |
        g, pipeline, role:admin
        g, argocd-admin, role:admin
      scopes: '[groups, cognito:groups, roles]'
%{ if !bootstrap && cluster_issuer == "ca-issuer" && keycloak.enable }
    volumeMounts:
      - name: certificate
        mountPath: /etc/ssl/certs/ca.crt
        subPath: ca.crt
    volumes:
      - name: certificate
        secret:
          secretName: argocd-tls
%{ endif }

argocd-applicationset: {}
argocd-notifications: {}

%{ if cert_manager.enable }
cert-manager: {}
%{ endif }

csi-secrets-store-provider-azure: {}

%{ if keycloak.enable }
keycloak:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "${cluster_issuer}"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      ingress.kubernetes.io/ssl-redirect: "true"
      kubernetes.io/ingress.allow-http: "false"
    hosts:
      - host: "${keycloak.domain}"
        paths:
          - /
      - host: "keycloak.apps.${base_domain}"
        paths:
          - /
    tls:
      - secretName: keycloak-tls
        hosts:
          - "${keycloak.domain}"
          - "keycloak.apps.${base_domain}"
  service:
    annotations:
      traefik.ingress.kubernetes.io/service.serversscheme: https
  keycloakClient:
    client:
      clientId: "${replace(oidc.client_id, "\"", "\\\"")}"
      secret: "${replace(oidc.client_secret, "\"", "\\\"")}"
      redirectUris:
        - "https://argocd.apps.${base_domain}/auth/callback"
        - "https://${argocd.domain}/auth/callback"
  keycloakUsers:
    %{ for username, infos in keycloak.user_map }
    ${username}:
      name: ${lookup(infos, "name")}
      first_name: ${lookup(infos, "first_name")}
      password: ${lookup(infos, "password")}
      email: ${lookup(infos, "email")}
    %{ endfor }
%{ endif }

%{ if loki.enable }
loki-stack: {}
%{ endif }

%{ if metrics_server.enable}
metrics-server: {}
%{ endif }

%{ if minio.enable }
minio:
  accessKey: "${replace(minio.access_key, "\"", "\\\"")}"
  secretKey: "${replace(minio.secret_key, "\"", "\\\"")}"
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "${cluster_issuer}"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      ingress.kubernetes.io/ssl-redirect: "true"
      kubernetes.io/ingress.allow-http: "false"
    hosts:
      - "${minio.domain}"
      - "minio.apps.${base_domain}"
    tls:
      - secretName: minio-tls
        hosts:
          - "${minio.domain}"
          - "minio.apps.${base_domain}"
  buckets:
    - name: "${loki.bucket_name}"
      policy: none
      purge: false
    - name: "${metrics_archives.bucket_name}"
      policy: none
      purge: false
%{ endif }

secrets-store-csi-driver: {}

%{ if traefik.enable }
traefik:
  middlewares:
    # NOTE: middleware name
    # A lowercase RFC 1123 subdomain must consist of lower
    # case alphanumeric characters, '-' or '.', and must start
    # and end with an alphanumeric character.
    redirections:
      withclustername:
        permanent: false
        regex: apps.${base_domain}
        replacement: apps.${cluster_name}.${base_domain}
%{ endif }

vault: {}

%{ if can(metrics_archives.bucket_config) }
thanos:
  ${ indent(4,yamlencode({"objstoreConfig": metrics_archives.bucket_config})) }

  storegateway:
    enabled: true
    createConfigMap: true

  query:
    dnsDiscovery:
      sidecarsService: kube-prometheus-stack-thanos-discovery
      sidecarsNamespace: kube-prometheus-stack

  bucketweb:
    enabled: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hostname: "thanos-bucketweb.apps.${base_domain}"
      extraHosts:
        - name: "${metrics_archives.bucketweb_domain}"
      tls: true
      extraTls:
        - secretName: thanos-bucketweb-tls
          hosts:
            - "${metrics_archives.bucketweb_domain}"
            - "thanos-query.apps.${base_domain}"

  queryFrontend:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hostname: "thanos-query.apps.${base_domain}"
      extraHosts:
        - name: "${metrics_archives.query_domain}"
      tls: true
      extraTls:
        - secretName: thanos-query-tls
          hosts:
            - "${metrics_archives.query_domain}"
            - "thanos-query.apps.${base_domain}"
%{ endif }

%{ if cluster_autoscaler.enable }
cluster-autoscaler: {}
%{ endif }
