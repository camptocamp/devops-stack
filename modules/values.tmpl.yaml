---
spec:
  destination:
    server: https://kubernetes.default.svc
  source:
    repoURL: ${repo_url}
    targetRevision: ${target_revision}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - "CreateNamespace=true"

apps:
  aad-pod-identity:
    enabled: false
  apps:
    enabled: true
  argocd:
    enabled: true
  cert-manager:
    enabled: ${cert_manager.enable}
  csi-secrets-store-provider-azure:
    enabled: false
  efs-provisioner:
    enabled: false
  keycloak:
    enabled: ${keycloak.enable}
  kube-prometheus-stack:
    enabled: ${kube_prometheus_stack.enable}
  local-path-provisioner:
    enabled: false
  loki-stack:
    enabled: ${loki.enable}
  metrics-server:
    enabled: ${metrics_server.enable}
  minio:
    enabled: ${minio.enable}
  secrets-store-csi-driver:
    enabled: false
  traefik:
    enabled: ${traefik.enable}
  vault:
    enabled: false
  thanos:
    enabled: ${ can(metrics_archives.bucket_config) ? true : false }
  cluster-autoscaler:
    enabled: ${cluster_autoscaler.enable}

${yamlencode({"extraApps": extra_apps})}
${yamlencode({"extraAppProjects": extra_app_projects})}
${yamlencode({"extraApplicationSets": extra_application_sets})}

argo-cd:
  installCRDs: false
  configs:
    cm:
      accounts.pipeline: apiKey
      resource.customizations.health.argoproj.io_Application: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.health ~= nil then
              hs.status = obj.status.health.status
              if obj.status.health.message ~= nil then
                hs.message = obj.status.health.message
              end
            end
          end
          return hs
      resource.customizations.health.networking.k8s.io_Ingress: |
        hs = {}
        hs.status = "Healthy"
        return hs
      configManagementPlugins: |
        - name: kustomized-helm
          init:
            command: ["/bin/sh", "-c"]
            args: ["helm dependency build || true"]
          generate:
            command: ["/bin/sh", "-c"]
            args: ["echo \"$ARGOCD_ENV_HELM_VALUES\" | helm template . --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $ARGOCD_ENV_HELM_ARGS -f - --include-crds > all.yaml && kustomize build"]
      url: "https://${argocd.domain}"
      oidc.config: |
        name: OIDC
        issuer: "${replace(oidc.issuer_url, "\"", "\\\"")}"
        clientID: "${replace(oidc.client_id, "\"", "\\\"")}"
        clientSecret: $oidc.default.clientSecret
        requestedIDTokenClaims:
          groups:
            essential: true
        requestedScopes:
          - openid
          - profile
          - email
    %{ if length(repositories) > 0 }
    repositories:
      ${indent(6, yamlencode(repositories))}
    %{ endif }
    rbac:
      policy.default: ''
      policy.csv: |
        g, pipeline, role:readonly
        g, argocd-admin, role:admin
      scopes: '[groups, cognito:groups, roles]'
    secret:
      argocdServerAdminPassword: "${argocd_server_admin_password}"
      argocdServerAdminPasswordMtime: '2020-07-23T11:31:23Z'
      extra:
        oidc.default.clientSecret: "${replace(oidc.client_secret, "\"", "\\\"")}"
        accounts.pipeline.tokens: "${replace(argocd_accounts_pipeline_tokens, "\"", "\\\"")}"
        server.secretkey: "${replace(argocd_server_secretkey, "\"", "\\\"")}"
  controller:
    metrics:
      enabled: true
  dex:
    metrics:
      enabled: true
  repoServer:
    metrics:
      enabled: true
  server:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
%{ if !bootstrap }
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
%{ endif }
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${argocd.domain}"
        - "argocd.apps.${base_domain}"
      tls:
        - secretName: argocd-tls
          hosts:
            - "${argocd.domain}"
            - "argocd.apps.${base_domain}"
    metrics:
      enabled: true
%{ if !bootstrap && cluster_issuer == "ca-issuer" && keycloak.enable }
    volumeMounts:
      - name: certificate
        mountPath: /etc/ssl/certs/ca.crt
        subPath: ca.crt
    volumes:
      - name: certificate
        secret:
          secretName: argocd-tls
%{ endif }

argocd-applicationset: {}
argocd-notifications: {}

%{ if cert_manager.enable }
cert-manager: {}
%{ endif }

csi-secrets-store-provider-azure: {}

%{ if keycloak.enable }
keycloak:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "${cluster_issuer}"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      ingress.kubernetes.io/ssl-redirect: "true"
      kubernetes.io/ingress.allow-http: "false"
    hosts:
      - host: "${keycloak.domain}"
        paths:
          - /
      - host: "keycloak.apps.${base_domain}"
        paths:
          - /
    tls:
      - secretName: keycloak-tls
        hosts:
          - "${keycloak.domain}"
          - "keycloak.apps.${base_domain}"
  service:
    annotations:
      traefik.ingress.kubernetes.io/service.serversscheme: https
  keycloakClient:
    client:
      clientId: "${replace(oidc.client_id, "\"", "\\\"")}"
      secret: "${replace(oidc.client_secret, "\"", "\\\"")}"
      redirectUris:
        - "https://argocd.apps.${base_domain}/auth/callback"
        - "https://${argocd.domain}/auth/callback"
        - "https://grafana.apps.${base_domain}/login/generic_oauth"
        - "https://${grafana.domain}/login/generic_oauth"
        - "https://prometheus.apps.${base_domain}/oauth2/callback"
        - "https://${prometheus.domain}/oauth2/callback"
        - "https://alertmanager.apps.${base_domain}/oauth2/callback"
        - "https://${alertmanager.domain}/oauth2/callback"
        - "https://traefik.apps.${cluster_name}.${base_domain}/_oauth"
  keycloakUsers:
    %{ for username, infos in keycloak.user_map }
    ${username}:
      name: ${lookup(infos, "name")}
      first_name: ${lookup(infos, "first_name")}
      password: ${lookup(infos, "password")}
      email: ${lookup(infos, "email")}
    %{ endfor }
%{ endif }

%{ if kube_prometheus_stack.enable }
kube-prometheus-stack:
  alertmanager:
    enabled: ${ alertmanager.enable }
%{ if alertmanager.enable }
    alertmanagerSpec:
      initContainers:
        - name: wait-for-oidc
          image: curlimages/curl:7.79.1
          command:
            - "/bin/sh"
            - "-c"
          args:
            # Wait for URL to be available (not 000) and ready (not 404)
            - until curl -skL -w "%%{http_code}\\n" "${replace(oidc.api_url, "\"", "\\\"")}" -o /dev/null | grep -vq "^\(000\|404\)$"; do echo "waiting for oidc at ${replace(oidc.api_url, "\"", "\\\"")}"; sleep 2; done
      containers:
        - args:
            - "--http-address=0.0.0.0:9095"
            - "--upstream=http://localhost:9093"
            - "--provider=oidc"
            - "--oidc-issuer-url=${replace(oidc.issuer_url, "\"", "\\\"")}"
            - "--client-id=${replace(oidc.client_id, "\"", "\\\"")}"
            - "--client-secret=${replace(oidc.client_secret, "\"", "\\\"")}"
            - "--cookie-secure=false"
            - "--cookie-secret=${replace(cookie_secret, "\"", "\\\"")}"
            - "--email-domain=*"
            - "--redirect-url=https://${alertmanager.domain}/oauth2/callback"
            %{ for arg in oidc.oauth2_proxy_extra_args }
            - ${arg}
            %{ endfor }
          image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
          name: alertmanager-proxy
          ports:
            - containerPort: 9095
              name: web
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${alertmanager.domain}"
        - "alertmanager.apps.${base_domain}"
      tls:
        - secretName: alertmanager-tls
          hosts:
            - "${alertmanager.domain}"
            - "alertmanager.apps.${base_domain}"
    service:
      targetPort: 9095
    serviceMonitor:
      selfMonitor: false
%{ endif }  # alertmanager config

  grafana:
    enabled: ${grafana.enable}
%{ if grafana.enable }
    adminPassword: "${replace(grafana.admin_password, "\"", "\\\"")}"
    grafana.ini:
      auth.generic_oauth:
        enabled: true
        allow_sign_up: true
        client_id: "${replace(oidc.client_id, "\"", "\\\"")}"
        client_secret: "${replace(oidc.client_secret, "\"", "\\\"")}"
        scopes: "openid profile email"
        auth_url: "${replace(oidc.oauth_url, "\"", "\\\"")}"
        token_url: "${replace(oidc.token_url, "\"", "\\\"")}"
        api_url: "${replace(oidc.api_url, "\"", "\\\"")}"
        %{ for k, v in grafana.generic_oauth_extra_args }
        ${k}: ${v}
        %{ endfor }
      users:
        auto_assign_org_role: Editor
      server:
        domain: "${grafana.domain}"
        root_url: "https://%(domain)s"
    sidecar:
      datasources:
        defaultDatasourceEnabled: false
    additionalDataSources:
      - name: Prometheus
        type: prometheus
        # TODO: fix this 9091 with oauthPassThru
        #url: http://kube-prometheus-stack-prometheus:9091/
        url: "http://kube-prometheus-stack-prometheus:9090"
        access: proxy
        isDefault: true
        jsonData:
          tlsAuth: false
          tlsAuthWithCACert: false
          oauthPassThru: true
%{ if can(metrics_archives.bucket_config) }
      - name: "Thanos-${cluster_name}"
        type: prometheus
        url: "http://thanos-query.thanos:9090"
        access: proxy
        isDefault: false
        jsonData:
          tlsAuth: false
          tlsAuthWithCACert: false
          oauthPassThru: true
%{ endif }
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${grafana.domain}"
        - "grafana.apps.${base_domain}"
      tls:
        - secretName: grafana-tls
          hosts:
            - "grafana.apps.${base_domain}"
            - "${grafana.domain}"
%{ endif } # Grafana config

  prometheus:
    enabled: ${prometheus.enable}
    thanosService:
      enabled: ${ can(metrics_archives.bucket_config) ? true : false  }
%{ if prometheus.enable }
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${prometheus.domain}"
        - "prometheus.apps.${base_domain}"
      tls:
        - secretName: prometheus-tls
          hosts:
            - "${prometheus.domain}"
            - "prometheus.apps.${base_domain}"
    prometheusSpec:
%{ if can(metrics_archives.bucket_config) }
      thanos:
        objectStorageConfig:
          key: thanos.yaml
          name: thanos-objectstorage
%{ endif }
      portName: proxy
      initContainers:
        - name: wait-for-oidc
          image: curlimages/curl:7.79.1
          command:
            - "/bin/sh"
            - "-c"
          args:
            # Wait for URL to be available (not 000) and ready (not 404)
            - until curl -skL -w "%%{http_code}\\n" "${replace(oidc.api_url, "\"", "\\\"")}" -o /dev/null | grep -vq "^\(000\|404\)$"; do echo "waiting for oidc at ${replace(oidc.api_url, "\"", "\\\"")}"; sleep 2; done
      containers:
        - args:
            - "--http-address=0.0.0.0:9091"
            - "--upstream=http://localhost:9090"
            - "--provider=oidc"
            - "--oidc-issuer-url=${replace(oidc.issuer_url, "\"", "\\\"")}"
            - "--client-id=${replace(oidc.client_id, "\"", "\\\"")}"
            - "--client-secret=${replace(oidc.client_secret, "\"", "\\\"")}"
            - "--cookie-secure=false"
            - "--cookie-secret=${replace(cookie_secret, "\"", "\\\"")}"
            - "--email-domain=*"
            - "--redirect-url=https://${prometheus.domain}/oauth2/callback"
            %{ for arg in oidc.oauth2_proxy_extra_args }
            - ${arg}
            %{ endfor }
            %{ for arg in oidc.prometheus_oauth2_proxy_extra_args }
            - ${arg}
            %{ endfor }
          image: ${oidc.prometheus_oauth2_proxy_image}
          name: prometheus-proxy
          ports:
            - containerPort: 9091
              name: proxy
          %{ if length(oidc.prometheus_oauth2_proxy_extra_volume_mounts) != 0 }
          volumeMounts:
          %{ for arg in oidc.prometheus_oauth2_proxy_extra_volume_mounts }
          - name: ${arg.name}
            mountPath: ${arg.mount_path}
          %{ endfor }
          %{ endif }
      alertingEndpoints:
        - name: kube-prometheus-stack-alertmanager
          namespace: kube-prometheus-stack
          port: 9093
    service:
      port: 9091
      targetPort: 9091
      additionalPorts:
        - name: web
          port: 9090
          targetPort: 9090
    serviceMonitor:
      selfMonitor: false
    additionalPodMonitors:
      - name: alertmanager
        podMetricsEndpoints:
          - path: /metrics
            targetPort: 9093
        namespaceSelector:
          matchNames:
          - kube-prometheus-stack
        selector:
          matchLabels:
            alertmanager: kube-prometheus-stack-alertmanager
            app: alertmanager
      - name: prometheus
        podMetricsEndpoints:
          - path: /metrics
            targetPort: 9090
        namespaceSelector:
          matchNames:
          - kube-prometheus-stack
        selector:
          matchLabels:
            app: prometheus
            prometheus: kube-prometheus-stack-prometheus
%{ if can(metrics_archives.bucket_config) }
  ${ indent(4,yamlencode({"thanosObjectStorageConfig": metrics_archives.bucket_config})) }
%{ endif }
%{ endif } # Prometheus config
%{ endif } # kube-prometheus-stack config

%{ if loki.enable }
loki-stack:
  loki:
    isDefault: false
%{ endif }

%{ if metrics_server.enable}
metrics-server: {}
%{ endif }

%{ if minio.enable }
minio:
  accessKey: "${replace(minio.access_key, "\"", "\\\"")}"
  secretKey: "${replace(minio.secret_key, "\"", "\\\"")}"
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "${cluster_issuer}"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      ingress.kubernetes.io/ssl-redirect: "true"
      kubernetes.io/ingress.allow-http: "false"
    hosts:
      - "${minio.domain}"
      - "minio.apps.${base_domain}"
    tls:
      - secretName: minio-tls
        hosts:
          - "${minio.domain}"
          - "minio.apps.${base_domain}"
  buckets:
    - name: "${loki.bucket_name}"
      policy: none
      purge: false
    - name: "${metrics_archives.bucket_name}"
      policy: none
      purge: false
%{ endif }

secrets-store-csi-driver: {}

%{ if traefik.enable }
traefik:
  middlewares:
    # NOTE: middleware name
    # A lowercase RFC 1123 subdomain must consist of lower
    # case alphanumeric characters, '-' or '.', and must start
    # and end with an alphanumeric character.
    redirections:
      withclustername:
        permanent: false
        regex: apps.${base_domain}
        replacement: apps.${cluster_name}.${base_domain}
  dashboard:
    enabled: false
    hosts:
      - traefik.apps.${base_domain}
      - traefik.apps.${cluster_name}.${base_domain}
    oidc:
      issuerurl: "${base64encode(oidc.issuer_url)}"
      clientid: "${base64encode(oidc.client_id)}"
      clientsecret: "${base64encode(oidc.client_secret)}"
      jwtsecret: "${base64encode(traefik_oidc_jwt_secret)}"
%{ endif }

vault: {}

%{ if can(metrics_archives.bucket_config) }
thanos:
  ${ indent(4,yamlencode({"objstoreConfig": metrics_archives.bucket_config})) }

  storegateway:
    enabled: true
    persistence:
      enabled: false
    resources:
      limits:
        memory: 2Gi
      requests:
        cpu: 0.5
        memory: 1Gi

  query:
    dnsDiscovery:
      enabled: false
    stores:
      - "thanos-storegateway:10901"
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 0.5
        memory: 512Mi

  compactor:
    enabled: true
    retentionResolutionRaw: 60d
    retentionResolution5m: 120d
    retentionResolution1h: 240d
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 0.5
        memory: 512Mi
    persistence:
      accessModes:
        - ReadWriteMany

  bucketweb:
    enabled: true
    sidecars:
      - args:
          - "--http-address=0.0.0.0:9075"
          - "--upstream=http://localhost:8080"
          - "--provider=oidc"
          - "--oidc-issuer-url=${replace(oidc.issuer_url, "\"", "\\\"")}"
          - "--client-id=${replace(oidc.client_id, "\"", "\\\"")}"
          - "--client-secret=${replace(oidc.client_secret, "\"", "\\\"")}"
          - "--cookie-secure=false"
          - "--cookie-secret=${replace(cookie_secret, "\"", "\\\"")}"
          - "--email-domain=*"
          - "--redirect-url=https://${metrics_archives.bucketweb_domain}/oauth2/callback"
          %{ for arg in oidc.oauth2_proxy_extra_args }
          - ${arg}
          %{ endfor }
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
        name: thanos-proxy
        ports:
          - containerPort: 9075
            name: proxy
    service:
      extraPorts:
        - name: proxy
          port: 9075
          protocol: TCP
          targetPort: proxy
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      tls: false
      hostname: ""
      extraRules:
        - host: "${metrics_archives.bucketweb_domain}"
          http:
            paths:
            - backend:
                service:
                  name: thanos-bucketweb
                  port:
                    name: proxy
              path: /
              pathType: ImplementationSpecific
        - host: "thanos-bucketweb.apps.${base_domain}"
          http:
            paths:
            - backend:
                service:
                  name: thanos-bucketweb
                  port:
                    name: proxy
              path: /
              pathType: ImplementationSpecific
      extraTls:
        - secretName: thanos-bucketweb-tls
          hosts:
            - "${metrics_archives.bucketweb_domain}"
            - "thanos-bucketweb.apps.${base_domain}"

  queryFrontend:
    sidecars:
      - args:
          - "--http-address=0.0.0.0:9075"
          - "--upstream=http://localhost:10902"
          - "--provider=oidc"
          - "--oidc-issuer-url=${replace(oidc.issuer_url, "\"", "\\\"")}"
          - "--client-id=${replace(oidc.client_id, "\"", "\\\"")}"
          - "--client-secret=${replace(oidc.client_secret, "\"", "\\\"")}"
          - "--cookie-secure=false"
          - "--cookie-secret=${replace(cookie_secret, "\"", "\\\"")}"
          - "--email-domain=*"
          - "--redirect-url=https://${metrics_archives.query_domain}/oauth2/callback"
          %{ for arg in oidc.oauth2_proxy_extra_args }
          - ${arg}
          %{ endfor }
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
        name: thanos-proxy
        ports:
          - containerPort: 9075
            name: proxy
    service:
      extraPorts:
        - name: proxy
          port: 9075
          protocol: TCP
          targetPort: proxy
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      tls: false
      hostname: ""
      extraRules:
        - host: "${metrics_archives.query_domain}"
          http:
            paths:
            - backend:
                service:
                  name: thanos-query-frontend
                  port:
                    name: proxy
              path: /
              pathType: ImplementationSpecific
        - host: "thanos-query.apps.${base_domain}"
          http:
            paths:
            - backend:
                service:
                  name: thanos-query-frontend
                  port:
                    name: proxy
              path: /
              pathType: ImplementationSpecific
      extraTls:
        - secretName: thanos-query-tls
          hosts:
            - "${metrics_archives.query_domain}"
            - "thanos-query.apps.${base_domain}"
%{ endif }

%{ if cluster_autoscaler.enable }
cluster-autoscaler: {}
%{ endif }
