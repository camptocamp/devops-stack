###
# The gitlab pipeline integrates [`tfmigrate`](https://github.com/minamijoyo/tfmigrate).
# It can handle automatically `terraform state mv` for renaming terraform resources when using remote state.
#
# Why tfmigrate?  see: https://github.com/minamijoyo/tfmigrate#why
#
# Workflow:
# ---------
# 1. Push your tf renamed resources and create a merge request (MR).
#    Make sure introduced changes  **do not introduce a new tf resource** (for every planned CREATE there should be a DELETE and vice-versa), other type of diffs will end up on a pipeline failure.
# 2. Check pipeline output (`terraform plan` output), see planned CREATE and DELETE resources of MR, verify previous statement, else remote whatever extra bit you added.
# 3. Create `tfmigrate.hcl` file and describe those operations, each MOVE operation should correspond to a CREATE and DELETE planned operation.
#    For example:
#
#    ```hcl
#     migration "state" "test" {
#         actions = [
#             "mv module.my_old_module.azurerm_key_vault.vault_test module.my_new_module.azurerm_key_vault.this",
#         ]
#     }
#     ```
#
# 4. Push file to MR, check pipeline (`tfmigrate plan` output).
# 5. Merge MR (this corresponds to a `tfmigrate apply`, equivalent to moving the states).
# 6. Delete `tfmigrate.hcl` file, push and merge.
# 7. Proceed with other tf config modifications.

---
variables:
  ARGOCD_VERSION: "2.0.3"
  TERRAFORM_VERSION: "1.0.0"
  CAMPTOCAMP_DEVOPS_STACK_VERSION: "0.38.0"
  TF_ROOT: "terraform"

###
# Pipeline for Merge Requests
#

mr:terraform:
  resource_group: "terraform"
  image:
    name: "hashicorp/terraform:$TERRAFORM_VERSION"
    entrypoint: [""]
  before_script:
    - 'export PATH="/tmp:$PATH"'
    - "wget https://github.com/argoproj/argo-cd/releases/download/v$ARGOCD_VERSION/argocd-linux-amd64 -O /tmp/argocd"
    - "chmod +x /tmp/argocd"
    - "wget https://github.com/minamijoyo/tfmigrate/releases/download/v0.2.5/tfmigrate_0.2.5_linux_amd64.tar.gz -O - | tar xz tfmigrate -O > /tmp/tfmigrate"
    - "chmod +x /tmp/tfmigrate"
  script:
    - 'cd "$TF_ROOT"'
    - "terraform init"
    - "if test -f tfmigrate.hcl; then tfmigrate plan tfmigrate.hcl; else terraform plan; fi"
  rules:
    - if: "$CI_MERGE_REQUEST_ID"

###
# Pipeline for Protected Branches
#

pb:terraform:
  resource_group: "terraform"
  image:
    name: "hashicorp/terraform:$TERRAFORM_VERSION"
    entrypoint: [""]
  before_script:
    - 'export PATH="/tmp:$PATH"'
    - "wget https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator -O /tmp/aws-iam-authenticator"
    - "chmod +x /tmp/aws-iam-authenticator"
    - "wget https://github.com/argoproj/argo-cd/releases/download/v$ARGOCD_VERSION/argocd-linux-amd64 -O /tmp/argocd"
    - "chmod +x /tmp/argocd"
    - "wget https://github.com/minamijoyo/tfmigrate/releases/download/v0.2.5/tfmigrate_0.2.5_linux_amd64.tar.gz -O - | tar xz tfmigrate -O > /tmp/tfmigrate"
    - "chmod +x /tmp/tfmigrate"
  script:
    - 'cd "$TF_ROOT"'
    - "terraform init"
    - "if test -f tfmigrate.hcl; then tfmigrate apply tfmigrate.hcl; else terraform apply --auto-approve; fi"
    - "terraform plan --detailed-exitcode"
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
