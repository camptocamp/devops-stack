---
variables:
  ARGOCD_VERSION: "1.7.12"
  TERRAFORM_VERSION: "0.14.6"
  CAMPTOCAMP_DEVOPS_STACK_VERSION: "0.26.0"
  TF_ROOT: terraform

stages:
  - terraform
  - argocd

###
# Pipeline for Merge Requests
#

mr:terraform:plan:
  stage: terraform
  image:
    name: hashicorp/terraform:$TERRAFORM_VERSION
    entrypoint: [""]
  variables:
    TF_WORKSPACE: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
  before_script:
    - wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tmp/jq
    - chmod +x /tmp/jq
    - export PATH="/tmp:$PATH"
  script:
    - cd "$TF_ROOT"
    - terraform init
    - terraform plan -out plan
    - terraform output -json kubeconfig | jq -r . > "$CI_PROJECT_DIR/kubeconfig"
    - echo "ARGOCD_AUTH_TOKEN=$(terraform output -json argocd_auth_token | jq -r .)" >> "$CI_PROJECT_DIR/.env"
    - echo "REPO_URL=$(terraform output -json repo_url | jq -r .)" >> "$CI_PROJECT_DIR/.env"
    - echo "TARGET_REVISION=$(terraform output -json target_revision | jq -r .)" >> "$CI_PROJECT_DIR/.env"
    - terraform show -json plan > plan.json
    - jq -r '.planned_values.outputs.app_of_apps_values.value[0]' plan.json > "$CI_PROJECT_DIR/values0.yaml"
    - jq -r '.planned_values.outputs.app_of_apps_values.value[1]' plan.json > "$CI_PROJECT_DIR/values1.yaml"
    - jq -r '.planned_values.outputs.app_of_apps_values.value[2]' plan.json > "$CI_PROJECT_DIR/values2.yaml"
  artifacts:
    paths:
      - kubeconfig
      - .env
      - values0.yaml
      - values1.yaml
      - values2.yaml
    expire_in: 1 hour
    when: always
  rules:
    - if: '$CI_MERGE_REQUEST_ID'

mr:argocd:diff:
  stage: argocd
  image:
    name: argoproj/argocd:v${ARGOCD_VERSION}
  variables:
    KUBECONFIG: "$CI_PROJECT_DIR/kubeconfig"
    APP_OF_APPS_VALUES_0: "$CI_PROJECT_DIR/values0.yaml"
    APP_OF_APPS_VALUES_1: "$CI_PROJECT_DIR/values1.yaml"
    APP_OF_APPS_VALUES_2: "$CI_PROJECT_DIR/values2.yaml"
  before_script:
    - python3 -c "from urllib.request import urlretrieve; urlretrieve('https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator', '/tmp/aws-iam-authenticator')"
    - chmod +x /tmp/aws-iam-authenticator
    - export PATH="/tmp:$PATH"
  script:
    - set -o allexport && . .env && set +o allexport
    - python3 -c "import urllib.request; print(urllib.request.urlopen('https://raw.githubusercontent.com/camptocamp/camptocamp-devops-stack/v$CAMPTOCAMP_DEVOPS_STACK_VERSION/scripts/app-diff.sh').read().decode())" | bash
  needs:
    - job: mr:terraform:plan
      artifacts: true
  allow_failure: true
  rules:
    - if: '$CI_MERGE_REQUEST_ID'

###
# Pipeline for Protected Branches
#

pb:terraform:apply:
  stage: terraform
  image:
    name: hashicorp/terraform:$TERRAFORM_VERSION
    entrypoint: [""]
  script:
    - cd "$TF_ROOT"
    - terraform init
    - terraform workspace select "$CI_COMMIT_REF_NAME" || terraform workspace new "$CI_COMMIT_REF_NAME"
    - terraform init
    - terraform apply --auto-approve
    - terraform plan --detailed-exitcode
    - terraform output -json kubeconfig | jq -r . > "$CI_PROJECT_DIR/kubeconfig"
    - echo "ARGOCD_AUTH_TOKEN=$(terraform output -json argocd_auth_token | jq -r .)" >> "$CI_PROJECT_DIR/.env"
  artifacts:
    paths:
      - kubeconfig
      - .env
    expire_in: 1 hour
    when: always
  environment:
    name: cluster/$CI_COMMIT_REF_NAME
    on_stop: pb:terraform:destroy
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'

pb:argocd:wait-for-app-of-apps:
  stage: argocd
  image:
    name: argoproj/argocd:v${ARGOCD_VERSION}
  variables:
    KUBECONFIG: "$CI_PROJECT_DIR/kubeconfig"
  before_script:
    - python3 -c "from urllib.request import urlretrieve; urlretrieve('https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator', '/tmp/aws-iam-authenticator')"
    - chmod +x /tmp/aws-iam-authenticator
    - export PATH="/tmp:$PATH"
  script:
    - set -o allexport && . .env && set +o allexport
    - python3 -c "import urllib.request; print(urllib.request.urlopen('https://raw.githubusercontent.com/camptocamp/camptocamp-devops-stack/v$CAMPTOCAMP_DEVOPS_STACK_VERSION/scripts/wait-for-app-of-apps.sh').read().decode())" | bash
  needs:
    - job: pb:terraform:apply
      artifacts: true
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'

###
# On-stop action for Gitlab CI environment
#

pb:terraform:destroy:
  stage: terraform
  image:
    name: hashicorp/terraform:$TERRAFORM_VERSION
    entrypoint: [""]
  variables:
    TF_WORKSPACE: $CI_COMMIT_REF_NAME
  script:
    - cd "$TF_ROOT"
    - terraform init
    - terraform destroy --auto-approve
    - if [ "$TF_WORKSPACE" != "default" ]; then WORKSPACE="$TF_WORKSPACE"; unset TF_WORKSPACE; terraform workspace select default; terraform workspace delete "$WORKSPACE"; fi
  environment:
    name: cluster/$CI_COMMIT_REF_NAME
    action: stop
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: manual
