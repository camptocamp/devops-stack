---
name: 'Terraform'
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  from-scratch:
    name: From Scratch
    runs-on: macos-latest
    strategy:
      matrix:
        tf_root:
          - tests/k3s-libvirt/terraform
    env:
      LIBVIRT_DEFAULT_URI: qemu+unix:///system?socket=/System/Volumes/Data/Users/runner/.cache/libvirt/libvirt-sock
      TF_ROOT: ${{ matrix.tf_root }}
      TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/camptocamp-devops-stack.git
      TF_VAR_target_revision: ${{ github.head_ref }}
    defaults:
      run:
        working-directory: ${{ matrix.tf_root }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.6

      - name: Terraform Format
        run: terraform fmt -check -diff -recursive

      - name: Install libvirt
        run: brew install libvirt

      - name: Start libvirt
        run: |
          brew services start libvirt
          # Somehow settinh LIBVIRT_DEFAULT_URI does not work
          mkdir -p /usr/local/var/run
          ln -s /System/Volumes/Data/Users/runner/.cache/libvirt /usr/local/var/run/libvirt

      - name: Build terraform-libvirt
        run: |
          git clone https://github.com/dmacvicar/terraform-provider-libvirt.git
          cd terraform-provider-libvirt
          git checkout v0.6.3
          make
          mkdir -p ~/.terraform.d/plugins/registry.terraform.io/dmacvicar/libvirt/0.6.3/darwin_amd64/
          cp terraform-provider-libvirt ~/.terraform.d/plugins/registry.terraform.io/dmacvicar/libvirt/0.6.3/darwin_amd64/

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: github.event_name == 'pull_request'
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/camptocamp-devops-stack.git
          TF_VAR_target_revision: ${{ github.head_ref }}
        run: terraform apply --auto-approve

      - name: Extract branch name
        if: github.event_name == 'push'
        shell: bash
        run: echo "TF_VAR_target_revision=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Terraform Apply
        if: github.event_name == 'push'
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.repository }}
        run: terraform apply --auto-approve

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/camptocamp-devops-stack.git
          TF_VAR_target_revision: ${{ github.head_ref }}
        run: terraform plan --detailed-exitcode -no-color

      - name: Terraform Plan
        if: github.event_name == 'push'
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.repository }}
        run: terraform plan --detailed-exitcode -no-color

      - name: Generate outputs.tf
        run: terraform-bin output -json > outputs.json

      - name: Wait for App of Apps
        uses: docker://argoproj/argocd:v1.7.12
        with:
          entrypoint: ./scripts/wait-for-app-of-apps.sh

      - name: Destroy Cluster
        run: terraform destroy --auto-approve

  update:
    name: Update
    if: github.event_name == 'pull_request'
    runs-on: macos-latest
    strategy:
      matrix:
        tf_root:
          - tests/k3s-libvirt/terraform
    env:
      TF_ROOT: ${{ matrix.tf_root }}
    defaults:
      run:
        working-directory: ${{ matrix.tf_root }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.6

      - name: Checkout ${{ github.base_ref }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.base_ref }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/camptocamp/camptocamp-devops-stack.git
          TF_VAR_target_revision: ${{ github.base_ref }}
        run: terraform apply --auto-approve

      - name: Terraform Plan
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/camptocamp/camptocamp-devops-stack.git
          TF_VAR_target_revision: ${{ github.base_ref }}
        run: terraform plan --detailed-exitcode -no-color

      - name: Generate outputs.tf
        run: terraform-bin output -json > outputs.json

      - name: Wait for App of Apps
        uses: docker://argoproj/argocd:v1.7.12
        with:
          entrypoint: ./scripts/wait-for-app-of-apps.sh

      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          clean: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -diff -recursive

      - name: Terraform Init on ${{ github.ref }}
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan on ${{ github.ref }}
        id: plan
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/camptocamp-devops-stack.git
          TF_VAR_target_revision: ${{ github.head_ref }}
        run: terraform plan -no-color -out plan

      - name: Generate outputs.tf
        run: terraform-bin show -json plan | jq -r '.planned_values.outputs' > outputs.json

      - name: ArgoCD app diff with ${{ github.ref }}
        id: app-diff
        uses: docker://argoproj/argocd:v1.7.12
        with:
          entrypoint: ./scripts/app-diff.sh

      - name: Terraform Apply on ${{ github.ref }}
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/camptocamp-devops-stack.git
          TF_VAR_target_revision: ${{ github.head_ref }}
        run: terraform apply --auto-approve

      - name: Wait for App of Apps
        uses: docker://argoproj/argocd:v1.7.12
        with:
          entrypoint: ./scripts/wait-for-app-of-apps.sh

      - name: Destroy Cluster
        run: terraform destroy --auto-approve
