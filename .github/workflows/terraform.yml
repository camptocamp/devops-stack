---
name: 'Terraform'
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'site/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'site/**'
jobs:
  from-scratch:
    name: From Scratch
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tf_root:
          - tests/k3s-docker/terraform
    env:
      TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/devops-stack.git
      TF_VAR_target_revision: ${{ github.head_ref }}
    defaults:
      run:
        working-directory: ${{ matrix.tf_root }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.6

      - name: Setup ArgoCD
        run: |
          mkdir "$GITHUB_WORKSPACE/bin"
          curl -L https://github.com/argoproj/argo-cd/releases/download/v1.8.7/argocd-linux-amd64 > "$GITHUB_WORKSPACE/bin/argocd"
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod +x "$GITHUB_WORKSPACE/bin/argocd"

      - name: Terraform Format
        run: terraform fmt -check -diff -recursive

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: github.event_name == 'pull_request'
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/devops-stack.git
          TF_VAR_target_revision: ${{ github.head_ref }}
        run: terraform apply --auto-approve

      - name: Extract branch name
        if: github.event_name == 'push'
        shell: bash
        run: echo "TF_VAR_target_revision=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Terraform Apply
        if: github.event_name == 'push'
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.repository }}
        run: terraform apply --auto-approve

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/devops-stack.git
          TF_VAR_target_revision: ${{ github.head_ref }}
        run: terraform plan --detailed-exitcode -no-color

      - name: Terraform Plan
        if: github.event_name == 'push'
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.repository }}
        run: terraform plan --detailed-exitcode -no-color

      - name: Destroy Cluster
        run: terraform destroy --auto-approve

  update:
    name: Update
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tf_root:
          - tests/k3s-docker/terraform
    env:
      TF_ROOT: ${{ matrix.tf_root }}
    defaults:
      run:
        working-directory: ${{ matrix.tf_root }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.6

      - name: Checkout ${{ github.base_ref }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.base_ref }}

      - name: Setup ArgoCD
        run: |
          mkdir "$GITHUB_WORKSPACE/bin"
          curl -L https://github.com/argoproj/argo-cd/releases/download/v1.8.7/argocd-linux-amd64 > "$GITHUB_WORKSPACE/bin/argocd"
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod +x "$GITHUB_WORKSPACE/bin/argocd"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/camptocamp/devops-stack.git
          TF_VAR_target_revision: ${{ github.base_ref }}
        run: terraform apply --auto-approve

      - name: Terraform Plan
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/camptocamp/devops-stack.git
          TF_VAR_target_revision: ${{ github.base_ref }}
        run: terraform plan --detailed-exitcode -no-color

      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          clean: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -diff -recursive

      - name: Terraform Init on ${{ github.ref }}
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan on ${{ github.ref }}
        id: plan
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/devops-stack.git
          TF_VAR_target_revision: ${{ github.head_ref }}
        run: terraform plan -no-color -out plan

      - name: Set env
        run: |
          terraform-bin output -json kubeconfig | jq -r . > ${{ github.workspace }}/kubeconfig
          echo "ARGOCD_AUTH_TOKEN=$(terraform-bin output -json argocd_auth_token | jq -r .)" >> $GITHUB_ENV
          echo "REPO_URL=$(terraform-bin output -json repo_url | jq -r .)" >> $GITHUB_ENV
          echo "TARGET_REVISION=$(terraform-bin output -json target_revision | jq -r .)" >> $GITHUB_ENV
          # FIXME: find a more robust way to do this
          terraform-bin show -json plan > plan.json
          echo "ARGOCD_SERVER=$(jq -r '.planned_values.outputs.argocd_server.value' plan.json)" >> $GITHUB_ENV
          jq -r '.planned_values.outputs.app_of_apps_values.value[0]' plan.json > ${{ github.workspace }}/values0.yaml
          jq -r '.planned_values.outputs.app_of_apps_values.value[1]' plan.json > ${{ github.workspace }}/values1.yaml
          jq -r '.planned_values.outputs.app_of_apps_values.value[2]' plan.json > ${{ github.workspace }}/values2.yaml

      - name: ArgoCD app diff with ${{ github.ref }}
        id: app-diff
        uses: docker://argoproj/argocd:v1.8.7
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
          APP_OF_APPS_VALUES_0 : ${{ github.workspace }}/values0.yaml
          APP_OF_APPS_VALUES_1 : ${{ github.workspace }}/values1.yaml
          APP_OF_APPS_VALUES_2 : ${{ github.workspace }}/values2.yaml
        with:
          entrypoint: ./.github/scripts/app-diff.sh

      - name: Terraform Apply on ${{ github.ref }}
        env:
          TF_VAR_repo_url: ${{ github.server_url }}/${{ github.actor }}/devops-stack.git
          TF_VAR_target_revision: ${{ github.head_ref }}
        run: terraform apply --auto-approve

      - name: Destroy Cluster
        run: terraform destroy --auto-approve
