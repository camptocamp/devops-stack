---
spec:
  destination:
    server: https://kubernetes.default.svc
  source:
    repoURL: ${repo_url}
    targetRevision: ${target_revision}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

apps:
  aad-pod-identity:
    enabled: false
  apps:
    enabled: true
  argocd:
    enabled: true
  cert-manager:
    enabled: true
  csi-secrets-store-provider-azure:
    enabled: false
  efs-provisioner:
    enabled: ${efs_provisioner.enable}
  keycloak:
    enabled: ${keycloak.enable}
  kube-prometheus-stack:
    enabled: true
  loki-stack:
    enabled: true
  metrics-server:
    enabled: true
  minio:
    enabled: ${minio.enable}
  namespaces:
    enabled: true
  olm:
    enabled: ${olm.enable}
  secrets-store-csi-driver:
    enabled: false
  traefik:
    enabled: true
  vault:
    enabled: false

${yamlencode({"extraApps": extra_apps})}

argo-cd:
  configs:
    secret:
      extra:
        oidc.default.clientSecret: ${oidc.client_secret}
        accounts.pipeline.tokens: '${argocd_accounts_pipeline_tokens}'
  controller:
    metrics:
      enabled: true
  dex:
    metrics:
      enabled: true
  repoServer:
    metrics:
      enabled: true
  server:
    config:
      url: https://${argocd.domain}
      oidc.config: |
        name: OIDC
        issuer: ${oidc.issuer_url}
        clientID: ${oidc.client_id}
        clientSecret: $oidc.default.clientSecret
        requestedIDTokenClaims:
          groups:
            essential: true
        requestedScopes:
          - openid
          - profile
          - email
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: ${cluster_issuer}
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
      hosts:
        - ${argocd.domain}
        - argocd.apps.${base_domain}
      tls:
        - secretName: argocd-tls
          hosts:
            - ${argocd.domain}
            - argocd.apps.${base_domain}
    metrics:
      enabled: true
    rbacConfig:
      policy.default: role:readonly
      policy.csv: |
        g, pipeline, role:readonly
        g, argocd-admin, role:admin
      scopes: '[groups, cognito:groups, roles]'

cert-manager: {}

efs-provisioner: {}

keycloak:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: ${cluster_issuer}
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: ${keycloak.domain}
        paths:
          - /
      - host: keycloak.apps.${base_domain}
        paths:
          - /
    tls:
      - secretName: keycloak-tls
        hosts:
          - ${keycloak.domain}
          - keycloak.apps.${base_domain}
  service:
    annotations:
      traefik.ingress.kubernetes.io/service.serversscheme: https
  keycloakClient:
    client:
      clientId: ${oidc.client_id}
      secret: ${oidc.client_secret}
      redirectUris:
        - https://argocd.apps.${base_domain}/auth/callback
        - https://${argocd.domain}/auth/callback
        - https://grafana.apps.${base_domain}/login/generic_oauth
        - https://${grafana.domain}/login/generic_oauth
        - https://prometheus.apps.${base_domain}/oauth2/callback
        - https://${prometheus.domain}/oauth2/callback
        - https://alertmanager.apps.${base_domain}/oauth2/callback
        - https://${alertmanager.domain}/oauth2/callback
  keycloakUser:
    password: "${keycloak.admin_password}"

kube-prometheus-stack:
  alertmanager:
    alertmanagerSpec:
      containers:
        - args:
            - --http-address=0.0.0.0:9095
            - --upstream=http://localhost:9093
            - --provider=oidc
            - --oidc-issuer-url=${oidc.issuer_url}
            - --client-id=${oidc.client_id}
            - --client-secret=${oidc.client_secret}
            - --cookie-secure=false
            - --cookie-secret=${cookie_secret}
            - --email-domain=*
            - --redirect-url=https://${alertmanager.domain}/oauth2/callback
            %{ for arg in oidc.oauth2_proxy_extra_args }
            - ${arg}
            %{ endfor }
          image: quay.io/pusher/oauth2_proxy:v6.1.1
          name: alertmanager-proxy
          ports:
            - containerPort: 9095
              name: web
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: ${cluster_issuer}
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
      hosts:
        - ${alertmanager.domain}
        - alertmanager.apps.${base_domain}
      tls:
        - secretName: alertmanager-tls
          hosts:
            - ${alertmanager.domain}
            - alertmanager.apps.${base_domain}
    service:
      targetPort: 9095

  grafana:
    grafana.ini:
      auth.generic_oauth:
        enabled: true
        allow_sign_up: true
        client_id: ${oidc.client_id}
        client_secret: ${oidc.client_secret}
        scopes: "openid profile email"
        auth_url: ${oidc.oauth_url}
        token_url: ${oidc.token_url}
        api_url: ${oidc.api_url}
        %{ for k, v in grafana.generic_oauth_extra_args }
        ${k}: ${v}
        %{ endfor }
      server:
        domain: ${grafana.domain}
        root_url: "https://%(domain)s"
    sidecar:
      datasources:
        defaultDatasourceEnabled: false
    additionalDataSources:
      - name: Prometheus
        type: prometheus
        # TODO: fix this 9091 with oauthPassThru
        #url: http://kube-prometheus-stack-prometheus:9091/
        url: http://kube-prometheus-stack-prometheus:9090/
        access: proxy
        isDefault: true
        jsonData:
          tlsAuth: false
          tlsAuthWithCACert: false
          oauthPassThru: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: ${cluster_issuer}
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
      hosts:
        - ${grafana.domain}
        - grafana.apps.${base_domain}
      tls:
        - secretName: grafana-tls
          hosts:
            - grafana.apps.${base_domain}
            - ${grafana.domain}

  prometheus:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: ${cluster_issuer}
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
      hosts:
        - ${prometheus.domain}
        - prometheus.apps.${base_domain}
      tls:
        - secretName: prometheus-tls
          hosts:
            - ${prometheus.domain}
            - prometheus.apps.${base_domain}
    prometheusSpec:
%{ if can(metrics_archives.bucket_config) }
      thanos:
        objectStorageConfig:
          key: thanos.yaml
          name: thanos-objectstorage
%{ endif }
      portName: proxy
      containers:
        - args:
            - --http-address=0.0.0.0:9091
            - --upstream=http://localhost:9090
            - --provider=oidc
            - --oidc-issuer-url=${oidc.issuer_url}
            - --client-id=${oidc.client_id}
            - --client-secret=${oidc.client_secret}
            - --cookie-secure=false
            - --cookie-secret=${cookie_secret}
            - --email-domain=*
            - --redirect-url=https://${prometheus.domain}/oauth2/callback
            %{ for arg in oidc.oauth2_proxy_extra_args }
            - ${arg}
            %{ endfor }
          image: quay.io/pusher/oauth2_proxy:v6.1.1
          name: prometheus-proxy
          ports:
            - containerPort: 9091
              name: proxy
    service:
      port: 9091
      targetPort: 9091
      additionalPorts:
        - name: web
          port: 9090
          targetPort: 9090
%{ if can(metrics_archives.bucket_config) }
  ${ indent(4,yamlencode({"thanosObjectStorageConfig": metrics_archives.bucket_config})) }
%{ endif }
loki-stack: {}

metrics-server: {}

%{ if minio.enable }
minio:
  accessKey: ${minio.access_key}
  secretKey: ${minio.secret_key}
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: ${cluster_issuer}
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - ${minio.domain}
      - minio.apps.${base_domain}
    tls:
      - secretName: minio-tls
        hosts:
          - ${minio.domain}
          - minio.apps.${base_domain}
  buckets:
    - name: ${loki.bucket_name}
      policy: none
      purge: false
    - name: ${metrics_archives.bucket_name}
      policy: none
      purge: false
%{ endif }

secrets-store-csi-driver: {}

traefik: {}

vault: {}
